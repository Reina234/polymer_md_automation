from A_modules.atomistic.gromacs.equilibriation.mdp_cache import MDPCache
from typing import Optional, Dict, List
from abc import ABC, abstractmethod


from typing import Dict, List, Optional
from A_modules.atomistic.gromacs.commands.grompp import Grompp
from A_modules.atomistic.gromacs.commands.mdrun import MDrun
from A_modules.atomistic.gromacs.equilibriation.mdp_cache import MDPCache
from A_modules.shared.utils.file_utils import check_directory_exists, copy_file
import logging
import os

from A_modules.atomistic.gromacs.equilibriation.mdp_cache import MDPCache


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class BaseWorkflowStep:
    def __init__(
        self,
        grompp: Grompp,
        mdrun: MDrun,
    ):
        """
        Initialize the workflow step.

        :param grompp: Grompp command instance.
        :param mdrun: MDrun command instance.
        """
        self.grompp = grompp
        self.mdrun = mdrun

    def _save_intermediate_files(
        self,
        step_name: str,
        mdrun_outputs: Dict[str, str],
        log_dir: str,
        save_intermediate_edr: bool,
        save_intermediate_gro: bool,
        save_intermediate_log: bool,
    ) -> List[str]:
        """
        Save intermediate `.edr`, `.gro`, and `.log` files if specified.

        :param step_name: Name of the current step (e.g., npt, nvt).
        :param mdrun_outputs: Output files generated by MDrun.
        :param log_dir: Directory to save intermediate files.
        :param save_intermediate_edr: Flag to save `.edr` files.
        :param save_intermediate_gro: Flag to save `.gro` files.
        :param save_intermediate_log: Flag to save `.log` files.
        :return: List of paths to saved intermediate files.
        """
        saved_files = []

        # Handle `.edr` files
        if save_intermediate_edr and "edr" in mdrun_outputs:
            edr_dir = os.path.join(log_dir, "edr_files")
            os.makedirs(edr_dir, exist_ok=True)
            saved_files.append(copy_file(mdrun_outputs["edr"], edr_dir))

        # Handle `.gro` files
        if save_intermediate_gro and "gro" in mdrun_outputs:
            gro_dir = os.path.join(log_dir, "gro_files")
            os.makedirs(gro_dir, exist_ok=True)
            saved_files.append(copy_file(mdrun_outputs["gro"], gro_dir))

        # Handle `.log` files
        if save_intermediate_log and "log" in mdrun_outputs:
            log_dir_path = os.path.join(log_dir, "log_files")
            os.makedirs(log_dir_path, exist_ok=True)
            saved_files.append(copy_file(mdrun_outputs["log"], log_dir_path))

        return saved_files

    def run(
        self,
        step_name: str,
        mdp_template_path: str,
        input_gro_path: str,
        input_topol_path: str,
        temp_output_dir: str,
        log_dir: str,
        varying_params: Dict[str, str],
        mdp_cache: MDPCache,
        save_intermediate_edr: bool = False,
        save_intermediate_gro: bool = False,
        save_intermediate_log: bool = False,
        verbose: bool = False,
    ) -> str:
        """
        Run the workflow step.

        :param step_name: Name of the current step (e.g., npt, nvt).
        :param mdp_template_path: Path to the MDP template file.
        :param input_gro_path: Path to the input GRO file.
        :param input_topol_path: Path to the topology file.
        :param temp_output_dir: Directory for temporary output files.
        :param main_output_dir: Directory for final output files.
        :param log_dir: Directory for storing intermediate `.gro`, `.edr`, and `.log` files.
        :param varying_params: Parameters specific to this workflow step.
        :param save_intermediate_edr: Flag to save intermediate `.edr` files in log_dir.
        :param save_intermediate_gro: Flag to save intermediate `.gro` files in log_dir.
        :param save_intermediate_log: Flag to save intermediate `.log` files in log_dir.
        :param verbose: Enable verbose logging for GROMACS commands.
        :return: Path to the final `.gro` file.
        """
        # Generate MDP file
        mdp_file = mdp_cache.get_or_create_mdp(
            template_path=mdp_template_path, params=varying_params
        )

        # Ensure directories exist
        check_directory_exists(temp_output_dir)
        check_directory_exists(log_dir)

        output_prefix = os.path.join(temp_output_dir, step_name)

        # Run GROMPP
        grompp_output = self.grompp.run(
            mdp_file_path=mdp_file,
            input_gro_path=input_gro_path,
            input_topol_path=input_topol_path,
            output_dir=temp_output_dir,
            output_name=step_name,
            verbose=verbose,
        )

        # Run MDrun
        mdrun_outputs = self.mdrun.run(
            input_tpr_path=grompp_output,
            output_name=output_prefix,
            verbose=verbose,
        )

        # Save intermediate files
        self._save_intermediate_files(
            step_name,
            mdrun_outputs,
            log_dir,
            save_intermediate_edr,
            save_intermediate_gro,
            save_intermediate_log,
        )

        # final_gro_path = copy_file(mdrun_outputs["gro"], main_output_dir)
        final_gro_path = mdrun_outputs["gro"]
        logger.info(f"Workflow step '{step_name}' completed.")
        return final_gro_path
