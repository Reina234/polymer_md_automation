from A_modules.atomistic.gromacs.equilibriation.mdp_cache import MDPCache
from typing import Optional, Dict, List
from abc import ABC, abstractmethod


from typing import Dict, List, Optional
from A_modules.atomistic.gromacs.commands.grompp import Grompp
from A_modules.atomistic.gromacs.commands.mdrun import MDrun
from A_modules.atomistic.gromacs.equilibriation.mdp_cache import MDPCache
from A_modules.shared.utils.file_utils import check_directory_exists, copy_file
import logging
import os

from A_modules.atomistic.gromacs.equilibriation.mdp_cache import MDPCache


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class BaseWorkflowStep:
    def __init__(self, grompp, mdrun):
        """
        Initialize the workflow step.

        :param grompp: Grompp command instance.
        :param mdrun: MDrun command instance.
        """
        self.grompp = grompp
        self.mdrun = mdrun

    def _save_intermediate_files(
        self,
        step_name: str,
        mdrun_outputs: Dict[str, str],
        log_dir: str,
        save_intermediate_edr: bool,
        save_intermediate_gro: bool,
        save_intermediate_log: bool,
    ) -> List[str]:
        """
        Save intermediate `.edr`, `.gro`, and `.log` files if specified.

        :param step_name: Name of the current step (e.g., npt, nvt).
        :param mdrun_outputs: Output files generated by MDrun.
        :param log_dir: Directory to save intermediate files.
        :param save_intermediate_edr: Flag to save `.edr` files.
        :param save_intermediate_gro: Flag to save `.gro` files.
        :param save_intermediate_log: Flag to save `.log` files.
        :return: List of paths to saved intermediate files.
        """
        saved_files = []

        def save_file(file_type: str, sub_dir: str):
            if file_type in mdrun_outputs:
                file_path = mdrun_outputs[file_type]
                if os.path.isfile(file_path):
                    dest_dir = os.path.join(log_dir, sub_dir)
                    os.makedirs(dest_dir, exist_ok=True)
                    saved_files.append(copy_file(file_path, dest_dir))
                else:
                    logger.warning(f"Expected {file_type} file not found: {file_path}")

        # Save files based on flags
        if save_intermediate_edr:
            save_file("edr", "edr_files")
        if save_intermediate_gro:
            save_file("gro", "gro_files")
        if save_intermediate_log:
            save_file("log", "log_files")

        return saved_files

    def run(
        self,
        step_name: str,
        mdp_template_path: str,
        input_gro_path: str,
        input_topol_path: str,
        temp_output_dir: str,
        log_dir: str,
        varying_params: Dict[str, str],
        mdp_cache,
        save_intermediate_edr: bool = False,
        save_intermediate_gro: bool = False,
        save_intermediate_log: bool = False,
        verbose: bool = False,
    ) -> str:
        """
        Run the workflow step.

        :param step_name: Name of the current step (e.g., npt, nvt).
        :param mdp_template_path: Path to the MDP template file.
        :param input_gro_path: Path to the input GRO file.
        :param input_topol_path: Path to the topology file.
        :param temp_output_dir: Directory for temporary output files.
        :param log_dir: Directory for storing intermediate `.gro`, `.edr`, and `.log` files.
        :param varying_params: Parameters specific to this workflow step.
        :param save_intermediate_edr: Flag to save intermediate `.edr` files in log_dir.
        :param save_intermediate_gro: Flag to save intermediate `.gro` files in log_dir.
        :param save_intermediate_log: Flag to save intermediate `.log` files in log_dir.
        :param verbose: Enable verbose logging for GROMACS commands.
        :return: Path to the final `.gro` file.
        """
        # Generate MDP file
        mdp_file = mdp_cache.get_or_create_mdp(
            template_path=mdp_template_path, params=varying_params
        )

        # Ensure directories exist
        os.makedirs(temp_output_dir, exist_ok=True)
        os.makedirs(log_dir, exist_ok=True)

        # Define output paths
        output_prefix = os.path.join(temp_output_dir, step_name)
        expected_outputs = {
            "gro": f"{output_prefix}.gro",
            "edr": f"{output_prefix}.edr",
            "log": f"{output_prefix}.log",
        }

        # Run GROMPP
        grompp_output = self.grompp.run(
            mdp_file_path=mdp_file,
            input_gro_path=input_gro_path,
            input_topol_path=input_topol_path,
            output_dir=temp_output_dir,
            output_name=step_name,
            verbose=verbose,
        )

        # Run MDrun
        mdrun_outputs = self.mdrun.run(
            input_tpr_path=grompp_output,
            output_name=output_prefix,
            verbose=verbose,
        )

        # Verify generated files
        for file_type, file_path in expected_outputs.items():
            if not os.path.isfile(file_path):
                raise FileNotFoundError(
                    f"Expected {file_type} file not found: {file_path}"
                )

        # Save intermediate files
        self._save_intermediate_files(
            step_name,
            expected_outputs,
            log_dir,
            save_intermediate_edr,
            save_intermediate_gro,
            save_intermediate_log,
        )

        logger.info(f"Workflow step '{step_name}' completed.")
        return expected_outputs["gro"]
